<Project>

  <PropertyGroup>
    <_packageBinaryPath>$(MSBuildThisFileDirectory)../tools/Uno.Wasm.Bootstrap.v0.dll</_packageBinaryPath>

    <WasmShellTasksPath Condition="!Exists('$(_packageBinaryPath)')">$(MSBuildThisFileDirectory)../bin/$(Configuration)/netstandard2.0</WasmShellTasksPath>
    <WasmShellTasksPath Condition="Exists('$(_packageBinaryPath)')">../tools</WasmShellTasksPath>

    <WasmShellIndexHtmlPath Condition="!Exists('$(_packageBinaryPath)')">$(MSBuildThisFileDirectory)../Templates/index.html</WasmShellIndexHtmlPath>
    <WasmShellIndexHtmlPath Condition="Exists('$(_packageBinaryPath)') and '$(WasmShellIndexHtmlPath)'==''">$(MSBuildThisFileDirectory)../tools/templates/index.html</WasmShellIndexHtmlPath>

    <WasmShellMode Condition="'$(WasmShellMode)'==''">browser</WasmShellMode>
    <MonoWasmRuntimeConfiguration Condition="'$(MonoWasmRuntimeConfiguration)'==''">release</MonoWasmRuntimeConfiguration>
    <MonoRuntimeDebuggerEnabled Condition="'$(MonoRuntimeDebuggerEnabled)'==''">false</MonoRuntimeDebuggerEnabled>
    <WasmShellILLinkerEnabled Condition="'$(WasmShellILLinkerEnabled)'==''">true</WasmShellILLinkerEnabled>
    <WasmShellGenerateCompressedFiles Condition="'$(WasmShellGenerateCompressedFiles)'=='' and '$(Configuration)'=='Debug'">false</WasmShellGenerateCompressedFiles>
    <WasmShellGenerateCompressedFiles Condition="'$(WasmShellGenerateCompressedFiles)'==''">true</WasmShellGenerateCompressedFiles>
    <WasmShellBrotliCompressionQuality Condition="'$(WasmShellBrotliCompressionQuality)'==''">7</WasmShellBrotliCompressionQuality>

    <!--
    Set this variable to use custom debugger binaries instead of the files found 
    in the active mono-wasm folder.
    -->
    <MonoRuntimeCustomDebuggerPath>$(MSBuildThisFileDirectory)/CustomDebuggerProxy</MonoRuntimeCustomDebuggerPath>
    <MonoRuntimeCustomLinkerPath>$(MSBuildThisFileDirectory)</MonoRuntimeCustomLinkerPath>

    <!-- 
		Force all applicable references to be present in the ReferenceCopyLocalPaths property.
		Otherwise, the ReferencePath property only contains reference assemblies if those are available.
		-->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

    <!-- 
      When using IISExpress with a standalone app, there's no point restarting IISExpress
      after build. It slows things unnecessarily and breaks in-flight HTTP requests.
    -->
    <NoRestartServerOnBuild>true</NoRestartServerOnBuild>

    <!-- Disable unwanted parts of the default publish process -->
    <CopyBuildOutputToPublishDirectory>false</CopyBuildOutputToPublishDirectory>
    <CopyOutputSymbolsToPublishDirectory>false</CopyOutputSymbolsToPublishDirectory>
    <PreserveCompilationContext>false</PreserveCompilationContext>
    <RazorCompileOnPublish>false</RazorCompileOnPublish>
    <GenerateDependencyFile>false</GenerateDependencyFile>
    <IsWebConfigTransformDisabled>true</IsWebConfigTransformDisabled>

    <UnoWasmPublishDistDir>$(AssemblyName)\dist\</UnoWasmPublishDistDir>

    <!-- Possible values: Interpreter, FullAOT, InterpreterAndAOT -->
    <WasmShellMonoRuntimeExecutionMode Condition="'$(WasmShellMonoRuntimeExecutionMode)'==''">Interpreter</WasmShellMonoRuntimeExecutionMode>

    <!-- Compatibility with previous version of the task using WasmShellEnableAOT -->
    <WasmShellMonoRuntimeExecutionMode Condition="'$(WasmShellEnableAOT)'=='true'">FullAOT</WasmShellMonoRuntimeExecutionMode>

    <!-- Web Project Run Parameters -->
    <RunCommand>dotnet</RunCommand>
    <!-- Nuget deployed run parameters -->
    <_unoBinArgs>unowasm serve</_unoBinArgs>
    <!-- Uno.Wasm.Bootstrap internal args -->
    <_unoBinArgs Condition="exists('$(MSBuildThisFileDirectory)../../Uno.Wasm.Bootstrap.Cli')">exec &quot;$(MSBuildThisFileDirectory)../../Uno.Wasm.Bootstrap.Cli/bin/$(Configuration)/netcoreapp2.1/dotnet-unowasm.dll&quot; serve $(_unoRunArgs)</_unoBinArgs>
    <RunArguments>$(_unoBinArgs) $(_unoRunArgs) --pathbase &quot;$(MSBuildProjectDirectory)\bin\$(Configuration)\$(TargetFramework)\dist&quot; --configuration $(Configuration) --targetframework $(TargetFramework) $(AdditionalRunArguments)</RunArguments>
  </PropertyGroup>

  <ItemGroup>
    <!-- Default compressed extensions when WasmShellGenerateCompressedFiles is enabled -->
    <WasmShellCompressedExtension Include=".wasm"/>
    <WasmShellCompressedExtension Include=".clr"/>
    <WasmShellCompressedExtension Include=".js"/>
    <WasmShellCompressedExtension Include=".css"/>
    <WasmShellCompressedExtension Include=".html"/>
  </ItemGroup>

  <ItemGroup>
    <UpToDateCheckInput Include="@(LinkerDescriptors)" />
    <UpToDateCheckInput Include="@(LinkerDescriptor)" />
  </ItemGroup>

  <UsingTask AssemblyFile="$(WasmShellTasksPath)/Uno.Wasm.Bootstrap.v0.dll" TaskName="Uno.Wasm.Bootstrap.ShellTask_v0" />
  <UsingTask AssemblyFile="$(WasmShellTasksPath)/Uno.Wasm.Bootstrap.v0.dll" TaskName="Uno.Wasm.Bootstrap.UnoInstallSDKTask_v0" />

  <Target Name="_GenerateLinkerDescriptor" BeforeTargets="PrepareForBuild">
    <!-- 
		Use the LinkerDescriptor ItemGroup to generate 
		the proper linker description file name.
		-->

    <ItemGroup>
      <LinkerDescriptor Include="@(LinkerDescriptors)"></LinkerDescriptor>
    </ItemGroup>

    <Error Condition="'@(LinkerDescriptor->Count())' &gt; 1" Text="There cannot be multiple linker descriptor files." />

    <ItemGroup>
      <EmbeddedResource Include="@(LinkerDescriptor)">
        <LogicalName>$(AssemblyName).xml</LogicalName>
        <Visible>false</Visible>
      </EmbeddedResource>
    </ItemGroup>

    <Message Importance="low" Text="Descriptor @(EmbeddedResource)" />
  </Target>

  <Target Name="BuildDist" AfterTargets="AfterBuild">

    <ItemGroup>
      <!-- Filter ReferenceCopyLocalPaths as it may contain pdbs as well -->
      <_AssembliesForReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths)"
                                             Condition="'%(Extension)' == '.dll'" />
    </ItemGroup>

    <PropertyGroup>
      <!-- Defined here because OutputPath is defined late -->
      <WasmShellDistPath Condition="'$(WasmShellDistPath)'==''">$(OutputPath)/dist</WasmShellDistPath>
    </PropertyGroup>

    <UnoInstallSDKTask_v0
        MonoWasmSDKUri="$(MonoWasmSDKUri)"
        MonoWasmAOTSDKUri="$(MonoWasmAOTSDKUri)"
        IsOSUnixLike="$([MSBuild]::IsOsUnixLike())"
        MonoRuntimeExecutionMode="$(WasmShellMonoRuntimeExecutionMode)"
        PackagerOverrideFile="$(MSBuildThisFileDirectory)/packager.cs"
        MonoTempFolder="$(WasmShellMonoTempFolder)">
      <Output TaskParameter="SdkPath" PropertyName="_UnoMonoSdkPath" />
      <Output TaskParameter="PackagerBinPath" PropertyName="_UnoMonoPackagerBinPath" />
      <Output TaskParameter="PackagerProjectFile" PropertyName="_UnoMonoPackagerProjectFile" />
    </UnoInstallSDKTask_v0>

    <MSBuild Condition="'$(_UnoMonoPackagerProjectFile)'!=''" Projects="$(_UnoMonoPackagerProjectFile)" Targets="Restore;Build" Properties="TargetFramework=net462" />

    <ShellTask_v0
        CurrentProjectPath="$(MSBuildProjectDirectory)"
        Assembly="$(IntermediateOutputPath)$(TargetFileName)"
        DistPath="$(WasmShellDistPath)"
        IntermediateOutputPath="$(ProjectDir)$(IntermediateOutputPath)"
        TargetFrameworkIdentifier="$(TargetFrameworkIdentifier)"
        WasmShellMode="$(WasmShellMode)"
        MonoWasmSDKPath="$(_UnoMonoSdkPath)"
        PackagerBinPath="$(_UnoMonoPackagerBinPath)"
        UseFileIntegrity="$(WashShellUseFileIntegrity)"
        GeneratePrefetchHeaders="$(WashShellGeneratePrefetchHeaders)"
        PWAManifestFile="$(WasmPWAManifestFile)"
        IndexHtmlPath="$(WasmShellIndexHtmlPath)"
        RuntimeConfiguration="$(MonoWasmRuntimeConfiguration)"
        RuntimeDebuggerEnabled="$(MonoRuntimeDebuggerEnabled)"
        CustomDebuggerPath="$(MonoRuntimeCustomDebuggerPath)"
        CustomLinkerPath="$(MonoRuntimeCustomLinkerPath)"
        MonoEnvironment="@(WasmShellMonoEnvironment)"
        MonoRuntimeExecutionMode="$(WasmShellMonoRuntimeExecutionMode)"
        MixedModeExcludedAssembly="@(MonoRuntimeMixedModeExcludedAssembly)"
        MonoILLinker="$(WasmShellILLinkerEnabled)"
        MonoTempFolder="$(WasmShellMonoTempFolder)"
        GenerateCompressedFiles="$(WasmShellGenerateCompressedFiles)"
        CompressedExtensions="@(WasmShellCompressedExtension)"
        BrotliCompressionQuality="$(WasmShellBrotliCompressionQuality)"
        EnableLongPathSupport="$(WasmShellEnableLongPathSupport)"
        Assets="@(Content)"
        ReferencePath="@(_AssembliesForReferenceCopyLocalPaths)" />
  </Target>

  <Target Name="_CleanDist" BeforeTargets="Clean">
    <ItemGroup>
      <_DistFilesToDelete Include="$(OutputPath)dist\**" />
    </ItemGroup>

    <Delete Files="@(_DistFilesToDelete)" />
  </Target>


  <Import Project="Uno.Wasm.Bootstrap.Publish.targets"/>


</Project>
