parameters:
  jobName: ''
  vmImage: ''

jobs:
- job:  ${{ parameters.jobName }}

  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    NUGET_PACKAGES: $(Agent.WorkFolder)/.nuget
    SourceLinkEnabled: false

  steps:
  - template: gitversion.yml
  - template: dotnet-install.yml

  - bash: brew install ninja
    displayName: 'Install Ninja'

  # - bash: |
  #     source ~/emsdk/emsdk_env.sh
  #     export PATH=$PATH:$(Agent.WorkFolder)/ninja-mac
  #     msbuild /r /t:Publish /p:Configuration=Release src/Uno.Wasm.Bootstrap.sln
  # 
  #   displayName: MSBuild Validation

  # - task: CopyFiles@2
  #   inputs:
  #     SourceFolder: $(build.sourcesdirectory)/src/Uno.Wasm.AotTests/bin/Release/netstandard2.0/dist
  #     Contents: '**/*.*'
  #     TargetFolder: $(build.artifactstagingdirectory)
  #     CleanTargetFolder: false
  #     OverWrite: false
  #     flattenFolders: false

  - bash: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Bootstrap
      dotnet msbuild /r /p:Configuration=Release
    displayName: Build bootstrap

  - bash: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.SampleNet6
      dotnet build -m:1 /bl:$(build.artifactstagingdirectory)/SampleNet6-mac.binlog
    displayName: Build NetCore-Wasm Sample

  # Static linking test (net5) without the linker
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Interpreter
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /p:WasmShellILLinkerEnabled=false /bl:$(build.artifactstagingdirectory)/SampleNet5-nolinker-macos.binlog
    displayName: Build StaticLinking.Interpreter Sample (net5 without linker)

  - bash: |
      $(build.sourcesdirectory)/build/scripts/run-tests.sh \
        "$(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Interpreter/bin/Release/net5.0/dist" \
        "$(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Aot.UITests" "http://localhost:8000/"
    displayName: StaticLinking Interpreter Test
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uno-wasm-bootstrap-macos-aot
      ArtifactType: Container
