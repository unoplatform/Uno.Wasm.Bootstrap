parameters:
  jobName: ''

jobs:
- job: ${{ parameters.jobName }}
  timeoutInMinutes: 90

  pool:
    vmImage: 'windows-2022'

  workspace:
    clean: all
      
  variables:
    NUGET_PACKAGES: $(build.sourcesdirectory)/.nuget
    NETCORE_VERSION: ${{ parameters.netcore_version }}

  steps:
  - checkout: self
    clean: true

  - template: gitversion.yml
  - template: dotnet-install.yml

  - pwsh: |
        attrib +r "$(build.sourcesdirectory)/src" /s /d
    displayName: Set all repo files as readonly

  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Bootstrap
      dotnet msbuild /r /p:Configuration=Release /p:DISABLE_CLIHOST_NET6=true
    displayName: Build bootstrap

  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Bootstrap
      dotnet msbuild /r /p:Configuration=Release /p:DISABLE_CLIHOST_NET6=true
    displayName: Build bootstrap

  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.SampleNet6
      $customMonoTempPath="$env:temp\with a space\test"
      mkdir $customMonoTempPath
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish /p:Configuration=Release /m:1 "/p:WasmShellMonoTempFolder=$customMonoTempPath" /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/SampleNet6-win-temp-with-space.binlog
    displayName: Build Raytracer Sample with Spaces

  # Standalone Server publish
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Server.net7
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/SampleServerNet7-win.binlog
    displayName: Build Standalone Server publish (net5)

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows-server.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Server.net7\bin\Release\net7.0\publish" `
      "Uno.Wasm.StaticLinking.Server.net7.exe" `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.UITests" `
      "http://localhost:8000/"

    displayName: Standalone Server publish tests (net7)
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  # Ray tracer

  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Sample.RayTracer
      $customMonoTempPath="$env:temp\with a space\test2"
      mkdir $customMonoTempPath
      dotnet clean -c Release
      dotnet publish -c Release /m:1 "/p:WasmShellMonoTempFolder=$customMonoTempPath" /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/aottest-win-temp-with-space.binlog
    displayName: Build Raytracer Sample with Spaces

  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Sample.RayTracer
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/SampleNet5-win.binlog
    displayName: Build Raytracer Sample

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.Sample.RayTracer\bin\Release\net6.0\publish\wwwroot" `
      "$(build.sourcesdirectory)\src\WasmAot.UITests" `
      "http://localhost:8000/"

    displayName: Raytracer UI Tests Net5
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  # Static linking test (net5) without the linker
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Interpreter
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /p:WasmShellILLinkerEnabled=false /bl:$(build.artifactstagingdirectory)/SampleNet5-nolinker-win.binlog
    displayName: Build StaticLinking.Interpreter Sample (net5 without linker)

  # Static linking test (net5) emsdk path with space test
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Interpreter
      mkdir "emsdk test"
      $env:WASMSHELL_WSLEMSDK="$(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Interpreter/emsdk test"
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /p:WasmShellILLinkerEnabled=false /bl:$(build.artifactstagingdirectory)/SampleNet5-emsdk-space.binlog
    displayName: Build StaticLinking.Interpreter Sample (emsdk path with space test)

  # Static linking test with obsfucation enabled
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Aot.Net6
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /p:WasmShellObfuscateAssemblies=true /bl:$(build.artifactstagingdirectory)/SampleNet6-nolinker-win.binlog
    displayName: Build StaticLinking.StaticLinking.Aot.Net6 Sample (net6 with obfuscation)

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.Net6\bin\Release\net6.0\dist" `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.UITests" `
      "http://localhost:8000/"

    displayName: StaticLinking.Aot.Net6 Tests (net6 with obfuscation)
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  # Static linking test with file name obsfucation enabled
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Aot.Net6
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /p:WasmShellAssembliesFileNameObfuscationMode=NoDots /bl:$(build.artifactstagingdirectory)/SampleNet5-nolinker-win.binlog
    displayName: Build StaticLinking.StaticLinking.Aot.Net5 Sample (net5 with file name obfuscation)

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.Net6\bin\Release\net6.0\dist" `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.UITests" `
      "http://localhost:8000/"

    displayName: StaticLinking.Aot.Net6 Tests (net6 with file name obfuscation)
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.Net6\bin\Release\net6.0\dist" `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.UITests" `
      "http://127.0.0.1:8000/"

    displayName: StaticLinking.Aot.Net6 Tests (net5 with file name obfuscation and ip address)
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  # Static linking test with dual obfuscation enabled
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Aot.Net6
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /p:WasmShellObfuscateAssemblies=true /p:WasmShellAssembliesFileNameObfuscationMode=NoDots /bl:$(build.artifactstagingdirectory)/SampleNet6-dual-win.binlog
    displayName: Build StaticLinking.Aot.Net6 Sample (dual obfuscation)

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.Net6\bin\Release\net6.0\dist" `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.UITests" `
      "http://localhost:8000/"

    displayName: StaticLinking.Aot.Net6 Tests (net6 with dual obfuscation)
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  # Static linking test (net5)
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Aot.Net6
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/SampleNet5-win.binlog
    displayName: Build StaticLinking.Aot Sample (net5)

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.Net6\bin\Release\net6.0\dist" `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.UITests" `
      "http://localhost:8000/"

    displayName: StaticLinking.Aot Tests Net6
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      
  # Static linking test (net7)
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.net7
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/SampleNet7-win.binlog
    displayName: Build StaticLinking.Aot Sample (net7)

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Net7\bin\Release\net7.0\dist" `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.UITests" `
      "http://localhost:8000/"

    displayName: StaticLinking.Aot Tests net7
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      
  # nuget path with space test
  - pwsh: |
      mkdir "$env:Temp\nuget with a space"
      $env:NUGET_PACKAGES="$env:Temp\nuget with a space"
      # Delete the obj folder to force a restore
      rm $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.net7/obj -r -force

      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.net7
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/SampleNet7-win-nuget-space.binlog
    displayName: Build StaticLinking with nuget space
    
    # Embedded mode test (net6)
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Embedded
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/SampleEmbedded-win.binlog
    displayName: Build StaticLinking.Embedded Sample (net6)

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Embedded\bin\Release\net6.0\dist" `
      "$(build.sourcesdirectory)\src\Uno.Wasm.StaticLinking.Aot.UITests" `
      "http://localhost:8000/"

    displayName: StaticLinking.Embedded Tests
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  # Thread test Debug build for emscripten LTO issue
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Threads
      dotnet clean -c Debug /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Debug /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/sample.threads-win-debug.binlog
    displayName: Build Threading Sample

  # Thread test
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Threads
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/sample.threads-win-release.binlog
    displayName: Build Threading Sample

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.Threads\bin\Release\net8.0\dist" `
      "$(build.sourcesdirectory)\src\Uno.Wasm.Threading.UITests" `
      "http://localhost:8000/"

    displayName: Threading Tests
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  # Thread AOT test
  - pwsh: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Threads.Aot
      dotnet clean -c Release /p:DISABLE_CLIHOST_NET6=true
      dotnet publish -c Release /m:1 /p:DISABLE_CLIHOST_NET6=true /p:WasmShellEmccLinkOptimization=false /bl:$(build.artifactstagingdirectory)/sample.threads-win.binlog
    displayName: Build Threading AOT Sample

  - pwsh: |
      $(build.sourcesdirectory)\build\scripts\run-tests-windows.ps1 `
      "$(build.sourcesdirectory)\src\Uno.Wasm.Threads.Aot\bin\Release\net6.0\dist" `
      "$(build.sourcesdirectory)\src\Uno.Wasm.Threading.UITests" `
      "http://localhost:8000/"
    displayName: Threading AOT Tests
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uno-wasm-bootstrap-windows-test
      ArtifactType: Container
