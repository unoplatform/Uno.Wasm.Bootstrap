parameters:
  jobName: ''
  linux_container: ''
  linux_vmImage: 'ubuntu-latest'
  netcore_version: ''

jobs:
- job: ${{ parameters.jobName }}

  container: ${{ parameters.linux_container }}

  workspace:
    clean: all
      
  pool:
    vmImage: ${{ parameters.linux_vmImage }}

  variables:
    NUGET_PACKAGES: $(build.sourcesdirectory)/.nuget
    EMSCRIPTEN_VERSION: 1.40.0
    NETCORE_VERSION: ${{ parameters.netcore_version }}

  steps:
  - checkout: self
    clean: true

  - template: build/ci/gitversion.yml

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    condition: ne(variables['NETCORE_VERSION'], '2.2.x')
    inputs:
      packageType: sdk
      version: ${{ parameters.netcore_version }}
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: UseDotNet@2
    displayName: 'Install .NET 5 SDK'
    inputs:
      packageType: sdk
      version: '5.0.100'
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: 4.9.1
      checkLatest: false

  - bash: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.Bootstrap
      dotnet msbuild /r /p:Configuration=Release /p:DISABLE_CLIHOST_NET6=true
    displayName: Build bootstrap

  - bash: |
      cd $(build.sourcesdirectory)/src
      dotnet msbuild /p:DISABLE_CLIHOST_NET6=true /p:Configuration=Release /t:Publish /m:1 Uno.Wasm.Bootstrap-netcore-only.slnf /bl:$(build.artifactstagingdirectory)/SampleNet5.binlog
    displayName: Build NetCore-Wasm Sample

  - task: CopyFiles@2
    inputs:
      SourceFolder: $(build.sourcesdirectory)/src/Uno.Wasm.AotTests.net5/bin/Release/net5.0/publish
      Contents: '**/*.*'
      TargetFolder: $(build.artifactstagingdirectory)
      CleanTargetFolder: false
      OverWrite: false
      flattenFolders: false

  ## Raytracer validation
  - bash: |
      $(build.sourcesdirectory)/build/scripts/run-tests.sh \
        "$(build.sourcesdirectory)/src/Uno.Wasm.AotTests.net5/bin/Release/net5.0/dist" \
        "$(build.sourcesdirectory)/src/WasmAot.UITests" "http://localhost:8000/"
    displayName: Raytracer UI Tests Net5
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  ## SWA sub-path validation
  - bash: |
      cd $(build.sourcesdirectory)/src/Uno.Wasm.AotTests.net5
      dotnet msbuild /r /p:Configuration=Release /t:Publish /m:1 "/p:WasmShellWebAppBasePath=/"
    displayName: Build RayTracer with sub-path

  - task: CopyFiles@2
    inputs:
      SourceFolder: $(build.sourcesdirectory)/src/Uno.Wasm.AotTests.net5/bin/Release/net5.0/publish
      Contents: '**/*.*'
      TargetFolder: $(build.artifactstagingdirectory)/subpath-override
      CleanTargetFolder: false
      OverWrite: false
      flattenFolders: false

  - bash: |
      $(build.sourcesdirectory)/build/scripts/run-tests-swa.sh \
        "$(build.sourcesdirectory)/src/Uno.Wasm.AotTests.net5/bin/Release/net5.0/dist" \
        "$(build.sourcesdirectory)/src/WasmAot.UITests" "http://localhost:8000/test/inner"
    displayName: Raytracer UI Tests Net5 (SWA)
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"

  ## Static linking validation
  - bash: |
      $(build.sourcesdirectory)/build/scripts/run-tests.sh \
        "$(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Aot.Net5/bin/Release/net5.0/dist" \
        "$(build.sourcesdirectory)/src/Uno.Wasm.StaticLinking.Aot.UITests" "http://localhost:8000/"
    displayName: StaticLinking.Aot Tests Net5
    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
  
  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: uno-wasm-bootstrap-linux-aot
      ArtifactType: Container
